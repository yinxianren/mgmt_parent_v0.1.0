<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.rxh.mapper.square.ChannelWalletMapper" >
  <resultMap id="BaseResultMap" type="com.rxh.square.pojo.ChannelWallet" >
    <id column="id" property="id" jdbcType="VARCHAR" />
    <result column="channel_id" property="channelId" jdbcType="VARCHAR" />
    <result column="channel_trans_code" property="channelTransCode" jdbcType="VARCHAR" />
    <result column="pay_type" property="payType" jdbcType="VARCHAR" />
    <result column="total_amount" property="totalAmount" jdbcType="DECIMAL" />
    <result column="income_amount" property="incomeAmount" jdbcType="DECIMAL" />
    <result column="out_amount" property="outAmount" jdbcType="DECIMAL" />
    <result column="total_fee" property="totalFee" jdbcType="DECIMAL" />
    <result column="fee_profit" property="feeProfit" jdbcType="DECIMAL" />
    <result column="total_balance" property="totalBalance" jdbcType="DECIMAL" />
    <result column="total_available_amount" property="totalAvailableAmount" jdbcType="DECIMAL" />
    <result column="total_unavailable_amount" property="totalUnavailableAmount" jdbcType="DECIMAL" />
    <result column="total_bond" property="totalBond" jdbcType="DECIMAL" />
    <result column="total_freeze_amount" property="totalFreezeAmount" jdbcType="DECIMAL" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, channel_id, channel_trans_code, pay_type, total_amount, income_amount, out_amount,
    total_fee, fee_profit, total_balance, total_available_amount, total_unavailable_amount,
    total_bond, total_freeze_amount, update_time
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.rxh.square.pojo.ChannelWalletExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from channel_wallet
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select
    <include refid="Base_Column_List" />
    from channel_wallet
    where id = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from channel_wallet
    where id = #{id,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.rxh.square.pojo.ChannelWalletExample" >
    delete from channel_wallet
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.rxh.square.pojo.ChannelWallet" >
    insert into channel_wallet (id, channel_id, channel_trans_code,
      pay_type, total_amount, income_amount,
      out_amount, total_fee, fee_profit,
      total_balance, total_available_amount, total_unavailable_amount,
      total_bond, total_freeze_amount, update_time
      )
    values (#{id,jdbcType=VARCHAR}, #{channelId,jdbcType=VARCHAR}, #{channelTransCode,jdbcType=VARCHAR},
      #{payType,jdbcType=VARCHAR}, #{totalAmount,jdbcType=DECIMAL}, #{incomeAmount,jdbcType=DECIMAL},
      #{outAmount,jdbcType=DECIMAL}, #{totalFee,jdbcType=DECIMAL}, #{feeProfit,jdbcType=DECIMAL},
      #{totalBalance,jdbcType=DECIMAL}, #{totalAvailableAmount,jdbcType=DECIMAL}, #{totalUnavailableAmount,jdbcType=DECIMAL},
      #{totalBond,jdbcType=DECIMAL}, #{totalFreezeAmount,jdbcType=DECIMAL}, #{updateTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.rxh.square.pojo.ChannelWallet" >
    insert into channel_wallet
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="channelId != null" >
        channel_id,
      </if>
      <if test="channelTransCode != null" >
        channel_trans_code,
      </if>
      <if test="payType != null" >
        pay_type,
      </if>
      <if test="totalAmount != null" >
        total_amount,
      </if>
      <if test="incomeAmount != null" >
        income_amount,
      </if>
      <if test="outAmount != null" >
        out_amount,
      </if>
      <if test="totalFee != null" >
        total_fee,
      </if>
      <if test="feeProfit != null" >
        fee_profit,
      </if>
      <if test="totalBalance != null" >
        total_balance,
      </if>
      <if test="totalAvailableAmount != null" >
        total_available_amount,
      </if>
      <if test="totalUnavailableAmount != null" >
        total_unavailable_amount,
      </if>
      <if test="totalBond != null" >
        total_bond,
      </if>
      <if test="totalFreezeAmount != null" >
        total_freeze_amount,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="channelId != null" >
        #{channelId,jdbcType=VARCHAR},
      </if>
      <if test="channelTransCode != null" >
        #{channelTransCode,jdbcType=VARCHAR},
      </if>
      <if test="payType != null" >
        #{payType,jdbcType=VARCHAR},
      </if>
      <if test="totalAmount != null" >
        #{totalAmount,jdbcType=DECIMAL},
      </if>
      <if test="incomeAmount != null" >
        #{incomeAmount,jdbcType=DECIMAL},
      </if>
      <if test="outAmount != null" >
        #{outAmount,jdbcType=DECIMAL},
      </if>
      <if test="totalFee != null" >
        #{totalFee,jdbcType=DECIMAL},
      </if>
      <if test="feeProfit != null" >
        #{feeProfit,jdbcType=DECIMAL},
      </if>
      <if test="totalBalance != null" >
        #{totalBalance,jdbcType=DECIMAL},
      </if>
      <if test="totalAvailableAmount != null" >
        #{totalAvailableAmount,jdbcType=DECIMAL},
      </if>
      <if test="totalUnavailableAmount != null" >
        #{totalUnavailableAmount,jdbcType=DECIMAL},
      </if>
      <if test="totalBond != null" >
        #{totalBond,jdbcType=DECIMAL},
      </if>
      <if test="totalFreezeAmount != null" >
        #{totalFreezeAmount,jdbcType=DECIMAL},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.rxh.square.pojo.ChannelWalletExample" resultType="java.lang.Integer" >
    select count(*) from channel_wallet
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update channel_wallet
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=VARCHAR},
      </if>
      <if test="record.channelId != null" >
        channel_id = #{record.channelId,jdbcType=VARCHAR},
      </if>
      <if test="record.channelTransCode != null" >
        channel_trans_code = #{record.channelTransCode,jdbcType=VARCHAR},
      </if>
      <if test="record.payType != null" >
        pay_type = #{record.payType,jdbcType=VARCHAR},
      </if>
      <if test="record.totalAmount != null" >
        total_amount = #{record.totalAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.incomeAmount != null" >
        income_amount = #{record.incomeAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.outAmount != null" >
        out_amount = #{record.outAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.totalFee != null" >
        total_fee = #{record.totalFee,jdbcType=DECIMAL},
      </if>
      <if test="record.feeProfit != null" >
        fee_profit = #{record.feeProfit,jdbcType=DECIMAL},
      </if>
      <if test="record.totalBalance != null" >
        total_balance = #{record.totalBalance,jdbcType=DECIMAL},
      </if>
      <if test="record.totalAvailableAmount != null" >
        total_available_amount = #{record.totalAvailableAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.totalUnavailableAmount != null" >
        total_unavailable_amount = #{record.totalUnavailableAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.totalBond != null" >
        total_bond = #{record.totalBond,jdbcType=DECIMAL},
      </if>
      <if test="record.totalFreezeAmount != null" >
        total_freeze_amount = #{record.totalFreezeAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.updateTime != null" >
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update channel_wallet
    set id = #{record.id,jdbcType=VARCHAR},
    channel_id = #{record.channelId,jdbcType=VARCHAR},
    channel_trans_code = #{record.channelTransCode,jdbcType=VARCHAR},
    pay_type = #{record.payType,jdbcType=VARCHAR},
    total_amount = #{record.totalAmount,jdbcType=DECIMAL},
    income_amount = #{record.incomeAmount,jdbcType=DECIMAL},
    out_amount = #{record.outAmount,jdbcType=DECIMAL},
    total_fee = #{record.totalFee,jdbcType=DECIMAL},
    fee_profit = #{record.feeProfit,jdbcType=DECIMAL},
    total_balance = #{record.totalBalance,jdbcType=DECIMAL},
    total_available_amount = #{record.totalAvailableAmount,jdbcType=DECIMAL},
    total_unavailable_amount = #{record.totalUnavailableAmount,jdbcType=DECIMAL},
    total_bond = #{record.totalBond,jdbcType=DECIMAL},
    total_freeze_amount = #{record.totalFreezeAmount,jdbcType=DECIMAL},
    update_time = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.rxh.square.pojo.ChannelWallet" >
    update channel_wallet
    <set >
      <if test="channelId != null" >
        channel_id = #{channelId,jdbcType=VARCHAR},
      </if>
      <if test="channelTransCode != null" >
        channel_trans_code = #{channelTransCode,jdbcType=VARCHAR},
      </if>
      <if test="payType != null" >
        pay_type = #{payType,jdbcType=VARCHAR},
      </if>
      <if test="totalAmount != null" >
        total_amount = #{totalAmount,jdbcType=DECIMAL},
      </if>
      <if test="incomeAmount != null" >
        income_amount = #{incomeAmount,jdbcType=DECIMAL},
      </if>
      <if test="outAmount != null" >
        out_amount = #{outAmount,jdbcType=DECIMAL},
      </if>
      <if test="totalFee != null" >
        total_fee = #{totalFee,jdbcType=DECIMAL},
      </if>
      <if test="feeProfit != null" >
        fee_profit = #{feeProfit,jdbcType=DECIMAL},
      </if>
      <if test="totalBalance != null" >
        total_balance = #{totalBalance,jdbcType=DECIMAL},
      </if>
      <if test="totalAvailableAmount != null" >
        total_available_amount = #{totalAvailableAmount,jdbcType=DECIMAL},
      </if>
      <if test="totalUnavailableAmount != null" >
        total_unavailable_amount = #{totalUnavailableAmount,jdbcType=DECIMAL},
      </if>
      <if test="totalBond != null" >
        total_bond = #{totalBond,jdbcType=DECIMAL},
      </if>
      <if test="totalFreezeAmount != null" >
        total_freeze_amount = #{totalFreezeAmount,jdbcType=DECIMAL},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.rxh.square.pojo.ChannelWallet" >
    update channel_wallet
    set channel_id = #{channelId,jdbcType=VARCHAR},
      channel_trans_code = #{channelTransCode,jdbcType=VARCHAR},
      pay_type = #{payType,jdbcType=VARCHAR},
      total_amount = #{totalAmount,jdbcType=DECIMAL},
      income_amount = #{incomeAmount,jdbcType=DECIMAL},
      out_amount = #{outAmount,jdbcType=DECIMAL},
      total_fee = #{totalFee,jdbcType=DECIMAL},
      fee_profit = #{feeProfit,jdbcType=DECIMAL},
      total_balance = #{totalBalance,jdbcType=DECIMAL},
      total_available_amount = #{totalAvailableAmount,jdbcType=DECIMAL},
      total_unavailable_amount = #{totalUnavailableAmount,jdbcType=DECIMAL},
      total_bond = #{totalBond,jdbcType=DECIMAL},
      total_freeze_amount = #{totalFreezeAmount,jdbcType=DECIMAL},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=VARCHAR}
  </update>



  <select id="selectAllChannel" resultMap="BaseResultMap"  >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from channel_wallet
    group by channel_id
  </select>

  <select id="getWalletByParam" resultMap="BaseResultMap"  >
    select
    cw.*
    from channel_wallet cw
    left join
    channel_info  ci on cw.channel_id=ci.channel_id
    <trim prefix="WHERE" suffixOverrides="AND">
      <if test="channelId!=null">
        ci.channel_id=#{channelId,jdbcType=VARCHAR} AND
      </if>
      <if test="channelTransCode!=null">
        ci.channel_trans_code=#{channelTransCode,jdbcType=VARCHAR} AND
      </if>
    </trim>
    group by channel_id
  </select>

  <sql id="Base_Column_List_2" >
    cw.id, cw.channel_id,fee_profit, cw.channel_trans_code, cw.pay_type, cw.total_amount,cw.income_amount,cw.out_amount,
    cw.total_fee,cw.total_balance, cw.total_available_amount, cw.total_unavailable_amount, cw.total_bond, cw.total_freeze_amount,
    cw.update_time
  </sql>

  <select id="getChannelWallet" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select
    <include refid="Base_Column_List" />
    from channel_wallet
    where channel_id = #{channelId,jdbcType=VARCHAR}
  </select>

  <select id="getChannelWalletByIds" resultMap="BaseResultMap" parameterType="java.util.List" >
    select
    <include refid="Base_Column_List" />
    from channel_wallet
    where channel_id in
    <foreach item="item" collection="channelIds" separator="," open="(" close=")" index="index">
      #{item}
    </foreach>
  </select>


</mapper>
