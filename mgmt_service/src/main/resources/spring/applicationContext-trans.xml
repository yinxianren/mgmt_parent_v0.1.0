<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 使用Aspectj代替SpringAOP proxy-target-class="true"：使用cglib而不是jdk的来生成代理方法 -->
<!--    <aop:aspectj-autoproxy/>-->

<!--    &lt;!&ndash;事物管理器&ndash;&gt;-->
<!--    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">-->
<!--        &lt;!&ndash;数据源&ndash;&gt;-->
<!--        <property name="dataSource" ref="dynamicDataSource"/>-->
<!--    </bean>-->

<!--    &lt;!&ndash;通知&ndash;&gt;-->
<!--    <tx:advice id="txAdvice">-->
<!--        <tx:attributes>-->
<!--            &lt;!&ndash;传播行为&ndash;&gt;-->
<!--            <tx:method name="save*" propagation="REQUIRED"/>-->
<!--            <tx:method name="insert*" propagation="REQUIRED"/>-->
<!--            <tx:method name="add*" propagation="REQUIRED"/>-->
<!--            <tx:method name="create*" propagation="REQUIRED"/>-->
<!--            <tx:method name="delete*" propagation="REQUIRED"/>-->
<!--            <tx:method name="update*" propagation="REQUIRED"/>-->
<!--            <tx:method name="batch*" propagation="REQUIRED"/>-->
<!--            <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>-->
<!--            <tx:method name="select*" propagation="SUPPORTS" read-only="true"/>-->
<!--            <tx:method name="get*" propagation="SUPPORTS" read-only="true"/>-->
<!--        </tx:attributes>-->
<!--    </tx:advice>-->

<!--    &lt;!&ndash; 多数据源AOP &ndash;&gt;-->
<!--    <bean id="dataSourceExchange" class="com.rxh.db.DataSourceExchange">-->
<!--        &lt;!&ndash; 设置读与写方法名开头字符串数组，规则与MyBatis事务相同 &ndash;&gt;-->
<!--        <property name="writeMethodList">-->
<!--            <list>-->
<!--                <value>save*</value>-->
<!--                <value>insert*</value>-->
<!--                <value>add*</value>-->
<!--                <value>create*</value>-->
<!--                <value>delete*</value>-->
<!--                <value>update*</value>-->
<!--            </list>-->
<!--        </property>-->
<!--        <property name="readMethodList">-->
<!--            <list>-->
<!--                <value>find*</value>-->
<!--                <value>select*</value>-->
<!--                <value>get*</value>-->
<!--            </list>-->
<!--        </property>-->
<!--    </bean>-->


<!--    &lt;!&ndash; 读写分离AOP &ndash;&gt;-->
<!--    <aop:config>-->
<!--        <aop:aspect ref="dataSourceExchange">-->
<!--            <aop:pointcut id="dataSourcePointcut" expression="execution(* com.rxh.service..*.*(..))"/>-->
<!--            <aop:before pointcut-ref="dataSourcePointcut" method="before"/>-->
<!--            <aop:after pointcut-ref="dataSourcePointcut" method="after"/>-->
<!--        </aop:aspect>-->
<!--    </aop:config>-->
<!--    &lt;!&ndash; 数据库事物AOP &ndash;&gt;-->
<!--    <aop:config>-->
<!--        <aop:advisor advice-ref="txAdvice" pointcut="execution(* com.rxh.service..*.*(..))"/>-->
<!--    </aop:config>-->

    <!-- 缓存刷新 -->
    <bean id="cacheRefresh" class="com.rxh.spring.aop.SendRefreshCacheMessage"/>
    <!-- 缓存刷新 -->
    <aop:config>
        <aop:aspect ref="cacheRefresh">
            <aop:pointcut id="cache" expression="@annotation(caching)"/>
            <aop:after-returning method="after" pointcut-ref="cache" arg-names="caching"/>
        </aop:aspect>
    </aop:config>

    <bean id="redisCacheDeleteAspect" class="com.rxh.spring.aop.RedisCacheDeleteAspect"/>
    <aop:config>
        <aop:aspect ref="redisCacheDeleteAspect">
            <aop:pointcut expression="@annotation(redisCacheDelete)" id="redisCacheDeleteAspectPointCut"/>
            <aop:after-returning method="after" pointcut-ref="redisCacheDeleteAspectPointCut" />
        </aop:aspect>
    </aop:config>

    <bean id="redisCacheUpdateAspect" class="com.rxh.spring.aop.RedisCacheUpdateAspect"/>
    <aop:config>
        <aop:aspect ref="redisCacheUpdateAspect">
            <aop:pointcut expression="@annotation(redisCacheUpdate)" id="redisCacheUpdateAspectPointCut"/>
            <aop:after-returning method="after" pointcut-ref="redisCacheUpdateAspectPointCut" />
        </aop:aspect>
    </aop:config>

    <bean id="redisCacheDeleteByBatchAspect" class="com.rxh.spring.aop.RedisCacheDeleteByBatchAspect"/>
    <aop:config>
        <aop:aspect ref="redisCacheDeleteByBatchAspect">
            <aop:pointcut expression="@annotation(redisCacheDeleteByBatch)" id="redisCacheDeleteByBatchAspectPointCut"/>
            <aop:after-returning method="after" pointcut-ref="redisCacheDeleteByBatchAspectPointCut" />
        </aop:aspect>
    </aop:config>


    <bean id="redisCacheDeleteByHashKeyAspect" class="com.rxh.spring.aop.RedisCacheDeleteByHashKeyAspect"/>
    <aop:config>
        <aop:aspect ref="redisCacheDeleteByHashKeyAspect">
            <aop:pointcut expression="@annotation(redisCacheDeleteByHashKey)" id="redisCacheDeleteByHashKeyAspectPointCut"/>
            <aop:after-returning method="after" pointcut-ref="redisCacheDeleteByHashKeyAspectPointCut" />
        </aop:aspect>
    </aop:config>

</beans>